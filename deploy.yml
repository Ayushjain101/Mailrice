---
# Mailserver Automated Deployment Playbook
# Usage: ansible-playbook -i inventory deploy.yml --extra-vars "domain=yourdomain.com hostname=mail.yourdomain.com"

- name: Deploy Custom Mail Server
  hosts: mailserver
  become: yes
  vars:
    # Override these with --extra-vars
    domain: "{{ domain }}"
    hostname: "{{ hostname }}"
    db_name: mailserver
    db_user: mailuser
    api_port: 3000
    vmail_uid: 5000
    vmail_gid: 5000
    # Cloudflare credentials (optional) - provide via --extra-vars for DNS automation
    cf_email: "{{ cf_email | default('') }}"
    cf_api_key: "{{ cf_api_key | default('') }}"
    cf_zone_id: "{{ cf_zone_id | default('') }}"

  tasks:
    - name: Check if database password file exists
      stat:
        path: /root/.db_password
      register: db_password_file

    - name: Load existing database password
      command: cat /root/.db_password
      register: existing_password
      when: db_password_file.stat.exists
      changed_when: false

    - name: Set existing database password as fact
      set_fact:
        db_password: "{{ existing_password.stdout }}"
      when: db_password_file.stat.exists

    - name: Generate new database password only if needed
      set_fact:
        db_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
      when: not db_password_file.stat.exists

    - name: Save database password for future deployments
      copy:
        content: "{{ db_password }}"
        dest: /root/.db_password
        mode: '0600'
      when: not db_password_file.stat.exists

    - name: Generate secure API key
      set_fact:
        initial_api_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits') }}"

    - name: Generate secure master API key
      set_fact:
        master_api_key: "{{ lookup('password', '/dev/null length=64 chars=ascii_letters,digits') }}"

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - postfix
          - postfix-mysql
          - dovecot-core
          - dovecot-imapd
          - dovecot-pop3d
          - dovecot-lmtpd
          - dovecot-mysql
          - opendkim
          - opendkim-tools
          - mysql-server
          - python3-pymysql
          - nginx
          - curl
          - jq
          - certbot
          - python3-certbot-nginx
        state: present

    - name: Install Node.js 20.x
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt-get install -y nodejs
      args:
        creates: /usr/bin/node

    - name: Create vmail group
      group:
        name: vmail
        gid: "{{ vmail_gid }}"
        system: yes

    - name: Create vmail user
      user:
        name: vmail
        uid: "{{ vmail_uid }}"
        group: vmail
        home: /var/vmail
        create_home: yes
        system: yes

    - name: Set /var/vmail permissions for group write access
      file:
        path: /var/vmail
        mode: '0770'
        owner: vmail
        group: vmail

    - name: Create MySQL database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Create MySQL user and set password
      shell: >
        mysql -e "CREATE USER IF NOT EXISTS '{{ db_user }}'@'localhost';" &&
        mysql -e "ALTER USER '{{ db_user }}'@'localhost' IDENTIFIED BY '{{ db_password }}';" &&
        mysql -e "GRANT ALL PRIVILEGES ON {{ db_name }}.* TO '{{ db_user }}'@'localhost';" &&
        mysql -e "FLUSH PRIVILEGES;"
      args:
        executable: /bin/bash

    - name: Copy database schema
      copy:
        src: templates/schema.sql
        dest: /tmp/schema.sql

    - name: Create database schema
      mysql_db:
        name: "{{ db_name }}"
        state: import
        target: /tmp/schema.sql
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Check if SPF/DMARC columns exist in virtual_domains table
      shell: >
        mysql -e "SHOW COLUMNS FROM virtual_domains LIKE 'spf_record';" {{ db_name }} | grep -q spf_record
      register: spf_column_check
      ignore_errors: yes
      changed_when: false

    - name: Add SPF/DMARC columns if missing (schema migration)
      shell: >
        mysql {{ db_name }} -e "ALTER TABLE virtual_domains
        ADD COLUMN spf_record TEXT AFTER dkim_public_key,
        ADD COLUMN dmarc_record TEXT AFTER spf_record,
        ADD COLUMN server_ip VARCHAR(45) AFTER dmarc_record;"
      when: spf_column_check.rc != 0
      ignore_errors: yes

    - name: Insert initial API key into database
      shell: |
        mysql {{ db_name }} -e "DELETE FROM api_keys WHERE description LIKE 'Default%' OR description = 'Initial API Key';" || true
        mysql {{ db_name }} -e "INSERT INTO api_keys (api_key, description) VALUES ('{{ initial_api_key }}', 'Initial API Key - Generated on deployment');"
      args:
        executable: /bin/bash

    - name: Configure Postfix main.cf
      template:
        src: templates/postfix-main.cf.j2
        dest: /etc/postfix/main.cf
        backup: yes
      notify: restart postfix

    - name: Configure Postfix master.cf
      blockinfile:
        path: /etc/postfix/master.cf
        block: |
          submission inet n       -       y       -       -       smtpd
            -o syslog_name=postfix/submission
            -o smtpd_tls_security_level=encrypt
            -o smtpd_sasl_auth_enable=yes
            -o smtpd_client_restrictions=permit_sasl_authenticated,reject

          smtps     inet  n       -       y       -       -       smtpd
            -o syslog_name=postfix/smtps
            -o smtpd_tls_wrappermode=yes
            -o smtpd_sasl_auth_enable=yes
            -o smtpd_client_restrictions=permit_sasl_authenticated,reject
      notify: restart postfix

    - name: Create Postfix MySQL config files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: 'templates/mysql-virtual-mailbox-domains.cf.j2', dest: '/etc/postfix/mysql-virtual-mailbox-domains.cf' }
        - { src: 'templates/mysql-virtual-mailbox-maps.cf.j2', dest: '/etc/postfix/mysql-virtual-mailbox-maps.cf' }
        - { src: 'templates/mysql-virtual-alias-maps.cf.j2', dest: '/etc/postfix/mysql-virtual-alias-maps.cf' }
      notify: restart postfix

    - name: Configure Dovecot SQL
      template:
        src: templates/dovecot-sql.conf.ext.j2
        dest: /etc/dovecot/dovecot-sql.conf.ext
        mode: '0640'
        owner: root
        group: dovecot
      notify: restart dovecot

    - name: Configure Dovecot mail location
      lineinfile:
        path: /etc/dovecot/conf.d/10-mail.conf
        regexp: '^mail_location'
        line: 'mail_location = maildir:/var/vmail/%d/%n'
      notify: restart dovecot

    - name: Configure Dovecot auth
      lineinfile:
        path: /etc/dovecot/conf.d/10-auth.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^!include auth-system.conf.ext', line: '#!include auth-system.conf.ext' }
        - { regexp: '^#!include auth-sql.conf.ext', line: '!include auth-sql.conf.ext' }
        - { regexp: '^#auth_mechanisms', line: 'auth_mechanisms = plain login' }
        - { regexp: '^#disable_plaintext_auth', line: 'disable_plaintext_auth = yes' }
      notify: restart dovecot

    - name: Configure Dovecot LMTP and auth services
      blockinfile:
        path: /etc/dovecot/conf.d/10-master.conf
        block: |
          service lmtp {
            unix_listener /var/spool/postfix/private/dovecot-lmtp {
              mode = 0600
              user = postfix
              group = postfix
            }
          }

          service auth {
            unix_listener /var/spool/postfix/private/auth {
              mode = 0660
              user = postfix
              group = postfix
            }
            unix_listener auth-userdb {
              mode = 0600
              user = vmail
            }
            user = dovecot
          }

          service auth-worker {
            user = vmail
          }
      notify: restart dovecot

    - name: Create mailapi system user
      user:
        name: mailapi
        system: yes
        create_home: no
        shell: /usr/sbin/nologin
        groups:
          - vmail
          - opendkim
        append: yes

    - name: Configure sudoers for mailapi
      copy:
        dest: /etc/sudoers.d/mailserver-api
        mode: '0440'
        content: |
          mailapi ALL=(ALL) NOPASSWD: /usr/sbin/opendkim-genkey
          mailapi ALL=(ALL) NOPASSWD: /usr/bin/opendkim-genkey
          mailapi ALL=(ALL) NOPASSWD: /bin/chown * /etc/opendkim/keys/*
          mailapi ALL=(ALL) NOPASSWD: /bin/chmod * /etc/opendkim/keys/*
          mailapi ALL=(ALL) NOPASSWD: /bin/chown * /var/vmail/*
          mailapi ALL=(ALL) NOPASSWD: /bin/systemctl reload opendkim
          mailapi ALL=(ALL) NOPASSWD: /bin/systemctl restart opendkim
          mailapi ALL=(ALL) NOPASSWD: /usr/bin/postqueue -p
          mailapi ALL=(ALL) NOPASSWD: /usr/bin/postqueue -f
          mailapi ALL=(ALL) NOPASSWD: /usr/bin/systemctl is-active *
          mailapi ALL=(ALL) NOPASSWD: /usr/bin/df *
          mailapi ALL=(ALL) NOPASSWD: /usr/bin/uptime
        validate: 'visudo -cf %s'

    - name: Create API directory
      file:
        path: /opt/mailserver-api
        state: directory
        mode: '0755'

    - name: Copy API files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: 'templates/server.js', dest: '/opt/mailserver-api/server.js' }
        - { src: 'templates/package.json', dest: '/opt/mailserver-api/package.json' }

    - name: Create API .env file
      template:
        src: templates/.env.j2
        dest: /opt/mailserver-api/.env

    - name: Install API dependencies
      npm:
        path: /opt/mailserver-api
        state: present

    - name: Set API directory ownership
      file:
        path: /opt/mailserver-api
        owner: mailapi
        group: mailapi
        recurse: yes

    - name: Ensure OpenDKIM directory exists
      file:
        path: /etc/opendkim
        state: directory
        owner: opendkim
        group: opendkim
        mode: '0755'

    - name: Ensure OpenDKIM keys directory exists
      file:
        path: /etc/opendkim/keys
        state: directory
        owner: opendkim
        group: opendkim
        mode: '0750'

    - name: Create OpenDKIM config files if they don't exist
      file:
        path: "{{ item }}"
        state: touch
        owner: opendkim
        group: opendkim
        mode: '0664'
        modification_time: preserve
        access_time: preserve
      loop:
        - /etc/opendkim/KeyTable
        - /etc/opendkim/SigningTable

    - name: Ensure OpenDKIM config files are writable by mailapi
      file:
        path: "{{ item }}"
        owner: opendkim
        group: opendkim
        mode: '0664'
      loop:
        - /etc/opendkim/KeyTable
        - /etc/opendkim/SigningTable

    - name: Set OpenDKIM directory permissions for group write access
      file:
        path: /etc/opendkim
        state: directory
        owner: opendkim
        group: opendkim
        mode: '0775'
        recurse: yes

    - name: Create systemd service for API
      template:
        src: templates/mailserver-api.service.j2
        dest: /etc/systemd/system/mailserver-api.service
      notify: restart mailserver-api

    - name: Create Dashboard directory
      file:
        path: /opt/mailserver-dashboard
        state: directory
        mode: '0755'

    - name: Create Dashboard subdirectories
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - /opt/mailserver-dashboard/css
        - /opt/mailserver-dashboard/js

    - name: Copy Dashboard HTML files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
      loop:
        - { src: 'templates/dashboard.html', dest: '/opt/mailserver-dashboard/index.html' }
        - { src: 'templates/login.html', dest: '/opt/mailserver-dashboard/login.html' }

    - name: Copy Dashboard CSS
      copy:
        src: templates/dashboard.css
        dest: /opt/mailserver-dashboard/css/dashboard.css
        mode: '0644'

    - name: Copy Dashboard JavaScript
      copy:
        src: templates/dashboard.js
        dest: /opt/mailserver-dashboard/js/dashboard.js
        mode: '0644'

    - name: Create Documentation directory
      file:
        path: /opt/mailserver-dashboard/docs
        state: directory
        mode: '0755'

    - name: Copy Documentation files
      copy:
        src: templates/docs/
        dest: /opt/mailserver-dashboard/docs/
        mode: '0644'

    - name: Create webroot directory for SSL certificate acquisition
      file:
        path: /var/www/html
        state: directory
        mode: '0755'

    - name: Create DNS A record for mail hostname via Cloudflare
      uri:
        url: "https://api.cloudflare.com/client/v4/zones/{{ cf_zone_id }}/dns_records"
        method: POST
        headers:
          X-Auth-Email: "{{ cf_email }}"
          X-Auth-Key: "{{ cf_api_key }}"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "A"
          name: "{{ hostname }}"
          content: "{{ ansible_default_ipv4.address }}"
          ttl: 120
          proxied: false
        status_code: [200, 201]
      when: cf_email != '' and cf_api_key != '' and cf_zone_id != ''
      ignore_errors: yes
      register: dns_hostname_result

    - name: Create DNS A record for dashboard subdomain via Cloudflare
      uri:
        url: "https://api.cloudflare.com/client/v4/zones/{{ cf_zone_id }}/dns_records"
        method: POST
        headers:
          X-Auth-Email: "{{ cf_email }}"
          X-Auth-Key: "{{ cf_api_key }}"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "A"
          name: "wow.{{ domain }}"
          content: "{{ ansible_default_ipv4.address }}"
          ttl: 120
          proxied: false
        status_code: [200, 201]
      when: cf_email != '' and cf_api_key != '' and cf_zone_id != ''
      ignore_errors: yes
      register: dns_dashboard_result

    - name: Wait for DNS propagation
      pause:
        seconds: 30
      when: (dns_hostname_result is changed or dns_dashboard_result is changed) and (dns_hostname_result is not failed and dns_dashboard_result is not failed)

    - name: Create temporary HTTP-only nginx config for certbot
      copy:
        dest: /etc/nginx/sites-available/certbot-temp
        content: |
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              server_name {{ hostname }} wow.{{ domain }};
              root /var/www/html;

              location / {
                  return 200 'OK';
                  add_header Content-Type text/plain;
              }

              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
          }
        mode: '0644'

    - name: Enable temporary nginx config
      file:
        src: /etc/nginx/sites-available/certbot-temp
        dest: /etc/nginx/sites-enabled/certbot-temp
        state: link

    - name: Configure Nginx for Dashboard subdomain
      template:
        src: templates/nginx-dashboard.conf.j2
        dest: /etc/nginx/sites-available/mailserver-dashboard
      notify: restart nginx

    - name: Enable Dashboard Nginx site
      file:
        src: /etc/nginx/sites-available/mailserver-dashboard
        dest: /etc/nginx/sites-enabled/mailserver-dashboard
        state: link
      notify: restart nginx

    - name: Configure Nginx reverse proxy for API
      template:
        src: templates/nginx-api.conf.j2
        dest: /etc/nginx/sites-available/mailserver-api
      notify: restart nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/mailserver-api
        dest: /etc/nginx/sites-enabled/mailserver-api
        state: link
      notify: restart nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Force Nginx restart before SSL certificate acquisition
      meta: flush_handlers

    - name: Wait for Nginx to be ready
      wait_for:
        port: 80
        timeout: 30

    - name: Obtain Let's Encrypt SSL certificate for mail hostname
      shell: |
        certbot certonly --webroot \
          -w /var/www/html \
          --non-interactive \
          --agree-tos \
          --email postmaster@{{ domain }} \
          --domains {{ hostname }} \
          --keep-until-expiring
      args:
        creates: /etc/letsencrypt/live/{{ hostname }}/fullchain.pem
      register: certbot_result
      ignore_errors: yes

    - name: Obtain Let's Encrypt SSL certificate for dashboard (wow subdomain)
      shell: |
        certbot certonly --webroot \
          -w /var/www/html \
          --non-interactive \
          --agree-tos \
          --email postmaster@{{ domain }} \
          --domains wow.{{ domain }} \
          --keep-until-expiring
      args:
        creates: /etc/letsencrypt/live/wow.{{ domain }}/fullchain.pem
      register: certbot_dashboard_result
      ignore_errors: yes

    - name: Reload Nginx after SSL certificate acquisition
      systemd:
        name: nginx
        state: reloaded
      when: (certbot_result is succeeded or certbot_dashboard_result is succeeded) and (certbot_result is changed or certbot_dashboard_result is changed)
      ignore_errors: yes

    - name: Remove temporary certbot nginx config
      file:
        path: /etc/nginx/sites-enabled/certbot-temp
        state: absent
      when: certbot_result is succeeded or certbot_dashboard_result is succeeded
      notify: reload nginx

    - name: Create certbot renewal hook directory
      file:
        path: /etc/letsencrypt/renewal-hooks/deploy
        state: directory
        mode: '0755'
      when: certbot_result is succeeded

    - name: Create renewal hook script
      copy:
        dest: /etc/letsencrypt/renewal-hooks/deploy/reload-mail-services.sh
        mode: '0755'
        content: |
          #!/bin/bash
          systemctl reload postfix dovecot nginx
      when: certbot_result is succeeded

    - name: Update Postfix to use Let's Encrypt certificates
      lineinfile:
        path: /etc/postfix/main.cf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^smtpd_tls_cert_file', line: 'smtpd_tls_cert_file = /etc/letsencrypt/live/{{ hostname }}/fullchain.pem' }
        - { regexp: '^smtpd_tls_key_file', line: 'smtpd_tls_key_file = /etc/letsencrypt/live/{{ hostname }}/privkey.pem' }
      when: certbot_result is succeeded
      notify: restart postfix

    - name: Configure Dovecot SSL
      blockinfile:
        path: /etc/dovecot/conf.d/10-ssl.conf
        create: yes
        block: |
          ssl = required
          ssl_cert = </etc/letsencrypt/live/{{ hostname }}/fullchain.pem
          ssl_key = </etc/letsencrypt/live/{{ hostname }}/privkey.pem
          ssl_min_protocol = TLSv1.2
          ssl_cipher_list = HIGH:!aNULL:!MD5
          ssl_prefer_server_ciphers = yes
      when: certbot_result is succeeded
      notify: restart dovecot

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Install UFW firewall
      apt:
        name: ufw
        state: present

    - name: Configure UFW - Allow SSH
      ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Configure UFW - Allow HTTP
      ufw:
        rule: allow
        port: '80'
        proto: tcp

    - name: Configure UFW - Allow HTTPS
      ufw:
        rule: allow
        port: '443'
        proto: tcp

    - name: Configure UFW - Allow SMTP
      ufw:
        rule: allow
        port: '25'
        proto: tcp

    - name: Configure UFW - Allow SMTP Submission
      ufw:
        rule: allow
        port: '587'
        proto: tcp

    - name: Configure UFW - Allow SMTPS
      ufw:
        rule: allow
        port: '465'
        proto: tcp

    - name: Configure UFW - Allow IMAP
      ufw:
        rule: allow
        port: '143'
        proto: tcp

    - name: Configure UFW - Allow IMAPS
      ufw:
        rule: allow
        port: '993'
        proto: tcp

    - name: Configure UFW - Allow POP3
      ufw:
        rule: allow
        port: '110'
        proto: tcp

    - name: Configure UFW - Allow POP3S
      ufw:
        rule: allow
        port: '995'
        proto: tcp

    - name: Configure UFW - Allow API port
      ufw:
        rule: allow
        port: "{{ api_port }}"
        proto: tcp

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny

    - name: Install Fail2ban
      apt:
        name: fail2ban
        state: present

    - name: Create Fail2ban jail for Postfix
      copy:
        dest: /etc/fail2ban/jail.d/postfix.conf
        content: |
          [postfix]
          enabled = true
          port = smtp,465,587
          filter = postfix
          logpath = /var/log/mail.log
          maxretry = 5
          bantime = 3600
          findtime = 600

          [postfix-sasl]
          enabled = true
          port = smtp,465,587
          filter = postfix-sasl
          logpath = /var/log/mail.log
          maxretry = 3
          bantime = 3600
          findtime = 600
      notify: restart fail2ban

    - name: Create Fail2ban jail for Dovecot
      copy:
        dest: /etc/fail2ban/jail.d/dovecot.conf
        content: |
          [dovecot]
          enabled = true
          port = pop3,pop3s,imap,imaps
          filter = dovecot
          logpath = /var/log/mail.log
          maxretry = 3
          bantime = 3600
          findtime = 600
      notify: restart fail2ban

    - name: Create Fail2ban jail for SSH
      copy:
        dest: /etc/fail2ban/jail.d/sshd.conf
        content: |
          [sshd]
          enabled = true
          port = ssh
          logpath = /var/log/auth.log
          maxretry = 5
          bantime = 3600
          findtime = 600
      notify: restart fail2ban

    - name: Create Fail2ban jail for Nginx
      copy:
        dest: /etc/fail2ban/jail.d/nginx.conf
        content: |
          [nginx-http-auth]
          enabled = true
          port = http,https
          logpath = /var/log/nginx/error.log
          maxretry = 3
          bantime = 3600
          findtime = 600

          [nginx-limit-req]
          enabled = true
          port = http,https
          logpath = /var/log/nginx/error.log
          maxretry = 10
          bantime = 600
          findtime = 600
      notify: restart fail2ban

    - name: Enable and start Fail2ban
      systemd:
        name: fail2ban
        enabled: yes
        state: started

    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - postfix
        - dovecot
        - mailserver-api
        - nginx

    - name: Wait for API to be ready
      uri:
        url: "http://localhost:{{ api_port }}/health"
        method: GET
        status_code: 200
      register: api_health
      until: api_health.status == 200
      retries: 30
      delay: 2

    - name: Create initial admin domain via API
      uri:
        url: "http://localhost:{{ api_port }}/domains"
        method: POST
        headers:
          x-api-key: "{{ initial_api_key }}"
          Content-Type: "application/json"
        body_format: json
        body:
          domain: "{{ domain }}"
          dkim_selector: "mail"
        status_code: [201, 409]
      register: domain_creation
      ignore_errors: yes

    - name: Get DNS records for admin domain
      uri:
        url: "http://localhost:{{ api_port }}/domains/{{ domain }}/dns"
        method: GET
        headers:
          x-api-key: "{{ initial_api_key }}"
        return_content: yes
      register: dns_records
      when: domain_creation.status == 201 or domain_creation.status == 409

    - name: Save DNS records to file
      copy:
        dest: /root/.mailserver_dns_records
        mode: '0600'
        content: |
          ========================================
          DNS Records for {{ domain }}
          ========================================

          {{ dns_records.json.dns_records | to_nice_json }}

          ========================================
          Copy these records to your DNS provider
          ========================================
      when: dns_records is defined and dns_records.json is defined

    - name: Save API credentials to file
      copy:
        dest: /root/.mailserver_credentials
        mode: '0600'
        content: |
          ========================================
          Mailrice Server Credentials
          ========================================
          Generated: {{ ansible_date_time.iso8601 }}

          Initial API Key: {{ initial_api_key }}
          Master API Key: {{ master_api_key }}
          Database Password: {{ db_password }}

          ========================================

    - name: Display completion message
      debug:
        msg: |
          ========================================
          🎉 Mailrice Deployment Complete!
          ========================================
          Domain: {{ domain }}
          Mail Hostname: {{ hostname }}
          Dashboard URL: https://wow.{{ domain }}
          API URL: http://{{ ansible_default_ipv4.address }}:{{ api_port }}
          Server IP: {{ ansible_default_ipv4.address }}

          🔐 CREDENTIALS (saved to /root/.mailserver_credentials):
          ========================================
          Dashboard Login: Use Initial API Key below
          Initial API Key: {{ initial_api_key }}
          Master API Key: {{ master_api_key }}
          DB Password: {{ db_password }}
          ========================================

          📋 DNS RECORDS FOR {{ domain }} (saved to /root/.mailserver_dns_records):
          ========================================
          {% if dns_records is defined and dns_records.json is defined %}
          DKIM: {{ dns_records.json.dns_records.dkim }}
          SPF:  {{ dns_records.json.dns_records.spf }}
          DMARC: {{ dns_records.json.dns_records.dmarc }}
          {% else %}
          Run: curl http://{{ ansible_default_ipv4.address }}:{{ api_port }}/domains/{{ domain }}/dns -H "x-api-key: {{ initial_api_key }}"
          {% endif %}
          ========================================

          🌐 REQUIRED DNS RECORDS:
          ========================================
          1. A Record: {{ hostname }} → {{ ansible_default_ipv4.address }}
          2. A Record: wow.{{ domain }} → {{ ansible_default_ipv4.address }}
          3. Add the DKIM, SPF, and DMARC records shown above
          ========================================

          📧 Next Steps:
          ========================================
          1. Add all DNS records above to your DNS provider
          2. Wait 5-10 minutes for DNS propagation
          3. Access dashboard: https://wow.{{ domain }}
          4. Login with your Initial API Key
          5. Create your first mailbox via dashboard
          6. Start sending emails!

          🚀 Quick Actions:
          ========================================
          Access Dashboard:
            https://wow.{{ domain }}

          Create mailbox (API):
            curl -X POST http://{{ ansible_default_ipv4.address }}:{{ api_port }}/mailboxes \
              -H "x-api-key: {{ initial_api_key }}" \
              -H "Content-Type: application/json" \
              -d '{"email":"sender@{{ domain }}","password":"YourSecurePass123!","quota_mb":1000}'

          Generate additional API keys:
            curl -X POST http://{{ ansible_default_ipv4.address }}:{{ api_port }}/api-keys \
              -H "Content-Type: application/json" \
              -d '{"master_key":"{{ master_api_key }}","description":"My App"}'

          View DNS records:
            curl http://{{ ansible_default_ipv4.address }}:{{ api_port }}/domains/{{ domain }}/dns \
              -H "x-api-key: {{ initial_api_key }}"
          ========================================

          📚 Documentation:
          GitHub: https://github.com/Ayushjain101/Mailrice
          ========================================

  handlers:
    - name: restart postfix
      systemd:
        name: postfix
        state: restarted

    - name: restart dovecot
      systemd:
        name: dovecot
        state: restarted

    - name: restart mailserver-api
      systemd:
        name: mailserver-api
        state: restarted

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: reload nginx
      systemd:
        name: nginx
        state: reloaded

    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
