---
# Mailserver Automated Deployment Playbook
# Usage: ansible-playbook -i inventory deploy.yml --extra-vars "domain=yourdomain.com hostname=mail.yourdomain.com"

- name: Deploy Custom Mail Server
  hosts: mailserver
  become: yes
  vars:
    # Override these with --extra-vars
    domain: "{{ domain }}"
    hostname: "{{ hostname }}"
    db_name: mailserver
    db_user: mailuser
    db_password: "{{ db_password | default('SecureMailPass' + lookup('password', '/dev/null length=15 chars=ascii_letters,digits')) }}"
    api_port: 3000
    vmail_uid: 5000
    vmail_gid: 5000

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - postfix
          - postfix-mysql
          - dovecot-core
          - dovecot-imapd
          - dovecot-pop3d
          - dovecot-lmtpd
          - dovecot-mysql
          - opendkim
          - opendkim-tools
          - mysql-server
          - python3-pymysql
          - nginx
          - curl
          - jq
        state: present

    - name: Install Node.js 20.x
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
        apt-get install -y nodejs
      args:
        creates: /usr/bin/node

    - name: Create vmail user
      user:
        name: vmail
        uid: "{{ vmail_uid }}"
        group: vmail
        home: /var/vmail
        create_home: yes
        system: yes

    - name: Create MySQL database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Create MySQL user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Copy database schema
      copy:
        src: templates/schema.sql
        dest: /tmp/schema.sql

    - name: Create database schema
      mysql_db:
        name: "{{ db_name }}"
        state: import
        target: /tmp/schema.sql
        login_unix_socket: /var/run/mysqld/mysqld.sock

    - name: Configure Postfix main.cf
      template:
        src: templates/postfix-main.cf.j2
        dest: /etc/postfix/main.cf
        backup: yes
      notify: restart postfix

    - name: Configure Postfix master.cf
      blockinfile:
        path: /etc/postfix/master.cf
        block: |
          submission inet n       -       y       -       -       smtpd
            -o syslog_name=postfix/submission
            -o smtpd_tls_security_level=encrypt
            -o smtpd_sasl_auth_enable=yes
            -o smtpd_client_restrictions=permit_sasl_authenticated,reject

          smtps     inet  n       -       y       -       -       smtpd
            -o syslog_name=postfix/smtps
            -o smtpd_tls_wrappermode=yes
            -o smtpd_sasl_auth_enable=yes
            -o smtpd_client_restrictions=permit_sasl_authenticated,reject
      notify: restart postfix

    - name: Create Postfix MySQL config files
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: 'templates/mysql-virtual-mailbox-domains.cf.j2', dest: '/etc/postfix/mysql-virtual-mailbox-domains.cf' }
        - { src: 'templates/mysql-virtual-mailbox-maps.cf.j2', dest: '/etc/postfix/mysql-virtual-mailbox-maps.cf' }
        - { src: 'templates/mysql-virtual-alias-maps.cf.j2', dest: '/etc/postfix/mysql-virtual-alias-maps.cf' }
      notify: restart postfix

    - name: Configure Dovecot SQL
      template:
        src: templates/dovecot-sql.conf.ext.j2
        dest: /etc/dovecot/dovecot-sql.conf.ext
        mode: '0640'
        owner: root
        group: dovecot
      notify: restart dovecot

    - name: Configure Dovecot mail location
      lineinfile:
        path: /etc/dovecot/conf.d/10-mail.conf
        regexp: '^mail_location'
        line: 'mail_location = maildir:/var/vmail/%d/%n'
      notify: restart dovecot

    - name: Configure Dovecot auth
      lineinfile:
        path: /etc/dovecot/conf.d/10-auth.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      loop:
        - { regexp: '^!include auth-system.conf.ext', line: '#!include auth-system.conf.ext' }
        - { regexp: '^#!include auth-sql.conf.ext', line: '!include auth-sql.conf.ext' }
        - { regexp: '^#auth_mechanisms', line: 'auth_mechanisms = plain login' }
        - { regexp: '^#disable_plaintext_auth', line: 'disable_plaintext_auth = yes' }
      notify: restart dovecot

    - name: Configure Dovecot LMTP and auth services
      blockinfile:
        path: /etc/dovecot/conf.d/10-master.conf
        block: |
          service lmtp {
            unix_listener /var/spool/postfix/private/dovecot-lmtp {
              mode = 0600
              user = postfix
              group = postfix
            }
          }

          service auth {
            unix_listener /var/spool/postfix/private/auth {
              mode = 0660
              user = postfix
              group = postfix
            }
            unix_listener auth-userdb {
              mode = 0600
              user = vmail
            }
            user = dovecot
          }

          service auth-worker {
            user = vmail
          }
      notify: restart dovecot

    - name: Create API directory
      file:
        path: /opt/mailserver-api
        state: directory
        mode: '0755'

    - name: Copy API files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: 'templates/server.js', dest: '/opt/mailserver-api/server.js' }
        - { src: 'templates/package.json', dest: '/opt/mailserver-api/package.json' }

    - name: Create API .env file
      template:
        src: templates/.env.j2
        dest: /opt/mailserver-api/.env

    - name: Install API dependencies
      npm:
        path: /opt/mailserver-api
        state: present

    - name: Create systemd service for API
      template:
        src: templates/mailserver-api.service.j2
        dest: /etc/systemd/system/mailserver-api.service
      notify: restart mailserver-api

    - name: Configure Nginx reverse proxy for API
      template:
        src: templates/nginx-api.conf.j2
        dest: /etc/nginx/sites-available/mailserver-api
      notify: restart nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/mailserver-api
        dest: /etc/nginx/sites-enabled/mailserver-api
        state: link
      notify: restart nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
        daemon_reload: yes
      loop:
        - postfix
        - dovecot
        - mailserver-api
        - nginx

    - name: Display completion message
      debug:
        msg: |
          ========================================
          Mail Server Deployment Complete!
          ========================================
          Domain: {{ domain }}
          Hostname: {{ hostname }}
          API URL: http://{{ hostname }}/api
          Server IP: {{ ansible_default_ipv4.address }}
          Database: {{ db_name }}
          DB User: {{ db_user }}
          DB Password: {{ db_password }}

          Next Steps:
          1. Configure DNS: Add A record for {{ hostname }} â†’ {{ ansible_default_ipv4.address }}
          2. Generate API key: curl -X POST http://{{ hostname }}/api/api-keys -H "x-api-key: default_key_change_me" -H "Content-Type: application/json" -d '{"description":"Production"}'
          3. Add domain via API
          4. Create mailboxes
          5. Optional: Install SSL certificate with certbot for HTTPS
          ========================================

  handlers:
    - name: restart postfix
      systemd:
        name: postfix
        state: restarted

    - name: restart dovecot
      systemd:
        name: dovecot
        state: restarted

    - name: restart mailserver-api
      systemd:
        name: mailserver-api
        state: restarted

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
